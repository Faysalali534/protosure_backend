# Generated by Django 3.2.15 on 2022-09-19 10:29

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='RepositoryInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('repository_name', models.CharField(max_length=100)),
                ('repository_owner', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='IssueMetadata',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField()),
                ('title', models.CharField(max_length=250)),
                ('description', models.TextField(null=True)),
                ('status', models.CharField(choices=[('Draft', 'Draft'), ('Open', 'Open'), ('Closed', 'Closed'), ('Merged', 'Merged')], max_length=250)),
                ('creation_date', models.DateField()),
                ('comment_count', models.IntegerField(default=0)),
                ('repository', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='protosure_issue_tracker.repositoryinfo')),
            ],
        ),
        migrations.CreateModel(
            name='IssueComments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField(default=None, null=True)),
                ('comment_number', models.CharField(default='', max_length=30)),
                ('issue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='protosure_issue_tracker.issuemetadata')),
            ],
        ),
        migrations.AddConstraint(
            model_name='issuemetadata',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('title__contains', 'WIP'), _negated=True), models.Q(('title__contains', 'DRAFT'), _negated=True), ('status__in', ['Draft', 'Open', 'Merged']), _connector='OR'), name='title_status_IssueMetadata_should_not_close_check'),
        ),
    ]
